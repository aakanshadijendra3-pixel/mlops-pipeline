name: End-to-End MLOps CI/CD Pipeline with MLflow Tracking & Monitoring

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # MLflow server credentials (set these in GitHub ‚Üí Settings ‚Üí Secrets ‚Üí Actions)
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_API_TOKEN: ${{ secrets.MLFLOW_API_TOKEN }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}

jobs:
  build-train-track:
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install nbconvert jupyter mlflow joblib scikit-learn pandas numpy matplotlib xgboost imbalanced-learn

      - name: üîÑ Convert Notebook to Script
        run: |
          echo "Converting notebook to Python script..."
          jupyter nbconvert --to script "mlruns/ml_flow_model_management.ipynb"
          echo "Moving generated script to root..."
          mv mlruns/ml_flow_model_management.py train_script.py
          echo "üßπ Cleaning notebook-specific lines..."
          # Remove Jupyter magic commands and get_ipython calls
          sed -i '/get_ipython/d' train_script.py || true
          sed -i '/^!/d' train_script.py || true
          echo "‚úÖ Notebook converted, cleaned, and moved successfully."

      - name: üöÄ Train and Log Model with MLflow
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_API_TOKEN: ${{ secrets.MLFLOW_API_TOKEN }}
        run: |
          echo "Starting model training and MLflow logging..."
          python train_script.py
          echo "‚úÖ Model training & MLflow logging completed!"

      - name: üßæ Verify Directory Structure
        run: |
          echo "Listing files to confirm model output:"
          ls -R

      - name: üì§ Upload Trained Model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            model.pkl
            models/
            artifacts/
          if-no-files-found: warn

  deploy:
    runs-on: ubuntu-latest
    needs: build-train-track
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      - name: üì• Download Trained Model Artifact
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: ./deployed_model

      - name: üß© Simulate Deployment
        run: |
          echo "Deploying trained model..."
          ls -R deployed_model
          echo "‚úÖ Model deployed successfully (simulated)."

      - name: ü©∫ Model Monitoring Simulation
        run: |
          echo "üîç Starting model monitoring..."
          echo "Collecting simulated drift, latency, and accuracy metrics..."
          echo "‚úÖ Monitoring step completed successfully."

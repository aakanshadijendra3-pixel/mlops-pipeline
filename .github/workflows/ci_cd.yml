name: End-to-End MLOps CI/CD Pipeline with MLflow Tracking & Monitoring

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# ---------------------------------------------------------
# üîê Define environment variables for MLflow tracking
# ---------------------------------------------------------
env:
  MLFLOW_TRACKING_URI: https://dagshub.com/aakanshadijendra3-pixel/mlops-demo.mlflow
  MLFLOW_TRACKING_USERNAME: aakanshadijendra3-pixel
  # Token securely stored in GitHub Secrets
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}

# ---------------------------------------------------------
# ‚öôÔ∏è JOB 1: Build, Train, and Track ML Model
# ---------------------------------------------------------
jobs:
  build-train-track:
    runs-on: ubuntu-latest
    name: Build, Train & Track Model

    steps:
      # ‚úÖ Step 1: Checkout the repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ Step 2: Set up Python environment
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # ‚úÖ Step 3: Install dependencies
      - name: üì¶ Install Dependencies
        run: |
          echo "Installing dependencies..."
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install mlflow scikit-learn pandas numpy joblib jupyter imbalanced-learn matplotlib xgboost dagshub

      # ‚úÖ Step 4: Convert Jupyter notebook to script (if exists)
      - name: üîÑ Convert Notebook to Python Script
        run: |
          NOTEBOOK_PATH="ml_flow_model_management.ipynb"
          if [ -f "$NOTEBOOK_PATH" ]; then
            echo "Converting notebook to Python script..."
            jupyter nbconvert --to script "$NOTEBOOK_PATH" --output train_script.py
            echo "Cleaning notebook-specific lines..."
            sed -i '/get_ipython/d' train_script.py || true
            sed -i '/^!/d' train_script.py || true
            echo "‚úÖ Notebook converted successfully."
          else
            echo "‚ö†Ô∏è No notebook found, skipping conversion."
          fi

      # ‚úÖ Step 5: Debug MLflow environment variables
      - name: üß© Debug Environment Variables
        run: |
          echo "MLflow Tracking URI: $MLFLOW_TRACKING_URI"
          echo "MLflow Username: $MLFLOW_TRACKING_USERNAME"
          echo "::add-mask::$MLFLOW_TRACKING_PASSWORD"
          echo "‚úÖ MLflow environment variables configured successfully."

      # ‚úÖ Step 6: Train and log model using MLflow
      - name: üöÄ Train and Log Model with MLflow
        env:
          MLFLOW_TRACKING_URI: https://dagshub.com/aakanshadijendra3-pixel/mlops-demo.mlflow
          MLFLOW_TRACKING_USERNAME: aakanshadijendra3-pixel
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          echo "üöÄ Starting model training..."
          if [ -f "train_script.py" ]; then
            python train_script.py
            echo "‚úÖ Training complete and logged to DagsHub MLflow."
          else
            echo "‚ö†Ô∏è train_script.py not found, skipping training."
          fi

      # ‚úÖ Step 7: Verify generated files
      - name: üßæ Verify Directory Structure
        run: |
          echo "üìÇ Checking generated files..."
          ls -R

      # ‚úÖ Step 8: Upload trained model artifact
      - name: üì§ Upload Trained Model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            model.pkl
            models/
            artifacts/
          if-no-files-found: warn

# ---------------------------------------------------------
# ‚öôÔ∏è JOB 2: Deploy and Monitor Model
# ---------------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    name: Deploy & Monitor Model
    needs: build-train-track
    if: github.ref == 'refs/heads/main'

    steps:
      # ‚úÖ Step 1: Checkout repository
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ Step 2: Download trained model artifact
      - name: üì• Download Trained Model Artifact
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: ./deployed_model

      # ‚úÖ Step 3: Simulate model deployment
      - name: üöÄ Simulate Model Deployment
        run: |
          echo "Deploying trained model..."
          ls -R deployed_model
          echo "‚úÖ Model deployed successfully (simulation)."

      # ‚úÖ Step 4: Simulate model monitoring
      - name: ü©∫ Model Monitoring Simulation
        run: |
          echo "üìà Monitoring model performance..."
          echo "Simulating drift detection, latency, and accuracy metrics..."
          echo "‚úÖ Monitoring step completed successfully."
